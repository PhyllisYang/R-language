countMatrix<-as.matrix(mydata[c(15:27,86:95)])
countMatrix<-round(countMatrix)
head(countMatrix)
nrow(countMatrix)
rownames(countMatrix)<-mydata$ID_REF
group_list=factor(c("C","C","C","C","C","C","C","C","C","C","C","C","C",
"A","A","A","A","A","A","A","A","A","A"))
colData<-data.frame(row.names=colnames(countMatrix),group_list=group_list)
dds<-DESeqDataSetFromMatrix(countData=countMatrix,colData=colData,design=~group_list)
suppressMessages(dds2 <- DESeq(dds))
resultsNames(dds2)
res <- results(dds2, contrast=c("group_list","C","A"))
plotMA(res,main="DESeq2",ylim=c(-2,2))  #画MA图
resOrdered <- res[order(res$padj),]
resOrdered=as.data.frame(resOrdered)
head(resOrdered)
resClean<-na.omit(resOrdered)
resClean=as.data.frame(resClean)
resSig<-resClean[resClean$padj<0.05,]    #筛选pvalue<0.05的数据
rld<- rlogTransformation(dds2, blind=TRUE)
vsd<-varianceStabilizingTransformation(dds2, blind=TRUE)
library('vsn')
par(mfrow=c(1,3))
notAllZero <- (rowSums(counts(dds2))>0)
meanSdPlot(log2(counts(dds2,normalized=TRUE)[notAllZero,] + 1), ylim = c(0,2.5))
meanSdPlot(assay(rld[notAllZero,]), ylim = c(0,2.5))
meanSdPlot(assay(vsd[notAllZero,]), ylim = c(0,2.5))
library('RColorBrewer') #heatmap
library('gplots')
select <- order(rowMeans(counts(dds2,normalized=TRUE)),decreasing=TRUE)[1:30]
hmcol<- colorRampPalette(brewer.pal(9, 'GnBu'))(100)
heatmap.2(counts(dds2,normalized=TRUE)[select,], col = hmcol,
Rowv = FALSE, Colv = FALSE, scale='none',
dendrogram='none', trace='none', margin=c(10,6))
distsRL <- dist(t(assay(dds2))) #Now we calculate sample to sample distances so we can make a dendrogram to look at the clustering of samples.
mat<- as.matrix(distsRL)
rownames(mat) <- colnames(mat) <- with(colData(dds2),paste(group_list,colnames(countMatrix),sep=' : '))
hc <- hclust(distsRL)
heatmap.2(mat, Rowv=as.dendrogram(hc),
symm=TRUE, trace='none',
col = rev(hmcol), margin=c(13, 13))
print(plotPCA(rld, intgroup=c('group_list'))) #PCA图
plotDispEsts(dds2) #Dispersion plot shows how the estimates are shrunk from the gene wise values (black dots) toward the fitted estimates, with the final values used in testing being the blue dots.
W <- res$stat #cook's distance
W <- res$stat #cook's distance
maxCooks <- apply(assays(dds2)[['cooks']],1,max)
idx <- !is.na(W)
plot(rank(W[idx]),maxCooks[idx],xlab='rank of Wald statistic',
ylab='maximum Cooks distance per gene',
ylim=c(0,5),cex=.4, col=rgb(0,0,0,.3))
m <- ncol(dds2)
p <- 3
abline(h=qf(.99, p, m - p))
library('DESeq2')
mydata<-read.table("/Users/fanyang/Downloads/data_AD/GSE5281_microarray_AD.txt",head=T)#输入数据
head(mydata)#check the data
countMatrix<-as.matrix(mydata[c(15:27,86:95)])#选择需要的数据放入矩阵
countMatrix<-round(countMatrix)
head(countMatrix)
rownames(countMatrix)<-mydata$ID_REF#列名
group_list=factor(c("C","C","C","C","C","C","C","C","C","C","C","C","C",
"A","A","A","A","A","A","A","A","A","A"))#把对照组分开，
colData<-data.frame(row.names=colnames(countMatrix),group_list=group_list)
dds<-DESeqDataSetFromMatrix(countData=countMatrix,colData=colData,design=~group_list)#制作dds对象
suppressMessages(dds2 <- DESeq(dds))
library('DESeq2')
mydata<-read.table("/Users/fanyang/Downloads/data_AD/GSE5281_microarray_AD.txt",head=T)#输入数据
head(mydata)#check the data
countMatrix<-as.matrix(mydata[c(15:27,86:95)])#选择需要的数据放入矩阵
countMatrix<-round(countMatrix)
head(countMatrix)
rownames(countMatrix)<-mydata$ID_REF#列名
group_list=factor(c("C","C","C","C","C","C","C","C","C","C","C","C","C",
"A","A","A","A","A","A","A","A","A","A"))#把对照组分开，
colData<-data.frame(row.names=colnames(countMatrix),group_list=group_list)
dds<-DESeqDataSetFromMatrix(countData=countMatrix,colData=colData,design=~group_list)#制作dds对象
suppressMessages(dds2 <- DESeq(dds))
resultsNames(dds2)
res <- results(dds2, contrast=c("group_list","C","A"))
resOrdered <- res[order(res$padj),]
resOrdered=as.data.frame(resOrdered)
head(resOrdered)
resClean<-na.omit(resOrdered)
resClean=as.data.frame(resClean)
resSig<-resClean[resClean$padj<0.05,]    #筛选pvalue<0.05的数据
resSig<-resSig[order(resSig$padj),]
resSig=as.data.frame(resSig)
head(resSig)
library("csv")
library('RColorBrewer') #heatmap
library('gplots')
select <- order(rowMeans(counts(dds2,normalized=TRUE)),decreasing=TRUE)[1:30]
hmcol<- colorRampPalette(brewer.pal(9, 'GnBu'))(100)
heatmap.2(counts(dds2,normalized=TRUE)[select,], col = hmcol,
Rowv = FALSE, Colv = FALSE, scale='none',
dendrogram='none', trace='none', margin=c(10,6))
library(stats)
mydata<-read.csv("/Users/fanyang/Downloads/DJA.csv",head=T)
head(mydata)
d<-data()
nchar(d)==24
format(Sys.Date())
library('DESeq2')
mydata<-read.table("/Users/fanyang/Downloads/0.txt",head=T)
mydata<-read.table("/Users/fanyang/Downloads/0.txt",head=T)
library('DESeq2')
mydata<-read.table("/Users/fanyang/Downloads/0.txt",head=T)
head(mydata)
library('DESeq2')
mydata<-read.table("/Users/fanyang/Downloads/0.txt",head=T)
head(mydata)
countMatrix<-as.matrix(mydata)
countMatrix<-round(countMatrix)
head(countMatrix)
library('DESeq2')
mydata<-read.table("/Users/fanyang/Downloads/0.txt",head=T)
head(mydata)
countMatrix<-as.matrix(mydata)
head(countMatrix)
rownames(countMatrix)<-mydata
rownames(countMatrix)<-mydata$yearly_change
group_list=factor(c("C"))
colData<-data.frame(row.names=colnames(countMatrix),group_list=group_list)
dds<-DESeqDataSetFromMatrix(countData=countMatrix,colData=colData,design=~group_list)
shapiro.test(mydata)
k<-c(mydata)
shapiro.test(k)
head(mydata)
head(k)
shapiro.test(k)
k<-c(0.9981319420219515, 1.04161738747249, 0.9220942785174523, 1.0383810151615032,1.06588777215177, 0.8708025910475923, 1.1705177800515427, 0.9210354096061705,0.7498889777067235, 0.9958613221434494, 1.0259309098075995, 0.9885198716186452, 1.2103556075283048, 1.2251077577257512, 1.127793520163058, 1.033905300783817, 0.9131173718746245, 1.0043549773443552, 0.7334358894169306, 1.485647773337674, 1.3496233894176692, 0.9921055959168661, 0.6324673180368517, 1.447238493915481, 1.13991040898252, 0.8349606609624599, 1.0030440109790544, 1.0735787449862433, 0.8888261058182924, 0.9488954738571741, 1.8087131612667033, 0.9730796478089263, 0.7975039001560063, 1.0772039645279081, 1.3167070217917678, 0.6681684442809857, 1.0858676207513416, 1.2516791281206439, 0.9684114609699302, 1.2676424464192366, 1.3075463917525774, 0.9786804591901098, 1.3105826243877288, 1.5097614949594296, 0.7954138301683984, 0.6954954954954955, 0.4393546867640132, 0.7945590994371482, 1.6926969134761343, 1.0413511359107215, 1.379102478231748, 1.2386040380212309, 0.6753865113152587, 1.2742805009538027, 0.9856157250715961, 0.8622465825794096, 0.8636746572719615, 1.0634920634920635, 1.1333277745351453, 1.1225721012360215, 1.2561279328876653, 0.9203276635709068, 1.0263620386643235, 0.9668029164825453, 1.1363194880877563, 1.206294936899794, 1.1247915971990665, 1.0825613280960498, 0.9683370986513316, 1.4454028067446711, 1.1880456846584655, 1.0211000864588908, 0.885571437211459, 1.3376511029662852, 1.1556697697374019, 0.8986687479751422, 1.1875624743957396, 0.8924811303831877, 1.1844338966279628, 1.1353644527986633, 1.1135459541493251, 0.8119540752059802, 1.1531389478770617, 1.0450906444356225, 0.8538296772287466, 1.026408798813643, 1.070710475938211, 1.1601034521533793, 0.8290555210918115, 0.7389515035308422, 1.3586323650401875, 1.1642463695543315, 0.8179444861215304, 0.9922713821018905, 1.0162061571072936, 1.1797421686454757, 0.9072143752955447, 1.1637583284231519, 1.2197577504284156, 0.9569982598144865, 1.2826494949410696, 1.2533474667204254, 1.0456283628476997, 1.064205433569036, 1.310313152790212, 0.9290037898332828, 1.2151847822756106, 1.0431249428667795, 1.1351919787744544, 1.0217963051695682, 1.3488281819887038, 1.2443364976967426, 1.2363294316328004, 1.1530726776011169, 1.236626318694899, 0.9373665530560835, 0.94620120888772, 0.8544801159489349, 1.209390161161403, 1.0306997699294418, 1.0109959242942075, 1.1499998617181428, 1.0456482493915598, 0.6926339853848066, 1.1714801503980765, 1.1026827387858609, 1.0622607801555168, 1.081885850074774, 1.2258183566883254, 1.0846426844510946)
shapiro.test(k)
log(k)
sqrt(k)
shapiro.test(log(k))
shapiro.test(sqrt(k))
install.packages('maps')
install.packages('geosphere')
library('maps')
library('geosphere')
stations<-read.csv("/Users/fanyang/Desktop/station(1).csv",header=TRUE)
stations<-read.csv("/Users/fanyang/Desktop/station(1).csv",header=TRUE)
trips<-read.csv("/Users/fanyang/Desktop/trip count(1).csv",header=TRUE)
stations<-read.csv("/Users/fanyang/Desktop/station(1).csv",header=TRUE)
trips<-read.csv("/Users/fanyang/Desktop/trip count.csv",header=TRUE)
library(ggmap)
library(maps)
library(geosphere)
map("state","California",col="grey",fill=TRUE,bg="white",lwd=0.1)
map.text("state","California")
col.1<-adjustcolor("orange red", alpha=0.4)
col.2<-adjustcolor("orange",alpha=0.4)
edge.pal<-colorRampPalette(c(col.1,col.2),alpha=TRUE)
edge.col<-edge.pal(100)
points(x=stations$long,y=stations$lat,pch=19,col="orange")
for(i in 1:nrow(trips)){
node1<-stations[trips[i,]$start_station_id == stations$id,]
node2<-stations[trips[i,]$end_station_id == stations$id,]
#}
#  for(i in 2:nrow(node1)){
arc<-gcIntermediate(c(node1[i,]$long,node1[i,]$lat),
c(node2[i,]$long,node2[i,]$lat),
n=100,addStartEnd=TRUE,breakAtDateLine = FALSE,sp=FALSE,sepNA)
edge.ind<-round(100*trips[i,]$count/max(trips$count))
lines(arc,col=edge.col[edge.ind],lwd=edge.ind/30)
}
for(i in 1:nrow(trips)){
node1<-stations[trips[i,]$start_station_id == stations$id,]
node2<-stations[trips[i,]$end_station_id == stations$id,]
}
for(i in 1:nrow(trips)){
node1<-stations[trips[i,]$start_station_id == stations$id,]
node2<-stations[trips[i,]$end_station_id == stations$id,]
}
for(i in 1:nrow(trips)){
node1<-stations[trips[i,]$start_station_id == stations$id,]
node2<-stations[trips[i,]$end_station_id == stations$id,]
}
library(ggplot2)
library(ggrepel)
install.packages("ggrepel")
install.packages("RSQLite")
install.packages("RSQLite")
install.packages("RSQLite")
library(ggplot2)
library(ggrepel)
library(RSQLite)
db <- read.csv("/Users/fanyang/Desktop/trip count 1.csv",header=TRUE)
library(ggplot2)
library(ggrepel)
library(RSQLite)
db <- read.csv("/Users/fanyang/Desktop/trip count 1.csv",header=TRUE)
trips <- dbGetQuery(db, "
SELECT s.lat start_lat,
s.long start_long,
e.lat end_lat,
e.long end_long,
COUNT(DISTINCT t.Id) count
FROM trip t
INNER JOIN station s ON t.start_station_id=s.id
INNER JOIN station e on t.end_station_id=e.id
WHERE s.city='San Francisco'
AND e.city='San Francisco'
GROUP BY s.lat, s.long, e.lat, e.long")
stations<-read.csv("/Users/fanyang/Desktop/station(1).csv",header=TRUE)
trips<-read.csv("/Users/fanyang/Desktop/trip count.csv",header=TRUE)
colnames(trips)[1]<-"start_station_id"
library(ggmap)
library(maps)
library(geosphere)
map.cities(us.cities,country = "CA")
map.text("state","California")
map<-get_map(location = 'san francisco', zoom = 9)
col.1<-adjustcolor("orange red", alpha=0.4)
col.2<-adjustcolor("orange",alpha=0.4)
edge.pal<-colorRampPalette(c(col.1,col.2),alpha=TRUE)
edge.col<-edge.pal(100)
plot(xlim=c(-122.375,-122.435),ylim=c(37.765,37.81),x=stations$long,y=stations$lat,pch=19,col="orange")
for(i in 1:nrow(trips)){
node1<-stations[trips[i,]$start_station_id == stations$id,]
node2<-stations[trips[i,]$end_station_id == stations$id,]
#}
arc<-gcIntermediate(c(node1$long,node1$lat),
c(node2$long,node2$lat),
n=100,addStartEnd=TRUE,breakAtDateLine = FALSE,sp=FALSE,sepNA)
edge.ind<-round(100*trips[i,]$count/max(trips$count))
lines(arc,col=edge.col[edge.ind],lwd=edge.ind/30)
}
text(x=stations$long,y=stations$lat,label=stations$name,cex=0.3)
plot(xlim=c(-122.375,-122.435),ylim=c(37.765,37.81),x=stations$long,y=stations$lat,pch=19,col="orange")
for(i in 1:nrow(trips)){
node1<-stations[trips[i,]$start_station_id == stations$id,]
node2<-stations[trips[i,]$end_station_id == stations$id,]
#}
arc<-gcIntermediate(c(node1$long,node1$lat),
c(node2$long,node2$lat),
n=100,addStartEnd=TRUE,breakAtDateLine = FALSE,sp=FALSE,sepNA)
edge.ind<-round(100*trips[i,]$count/max(trips$count))
lines(arc,col=edge.col[edge.ind],lwd=edge.ind/30)
}
text(x=stations$long,y=stations$lat,label=stations$name,cex=0.5)
plot(xlim=c(-122.375,-122.435),ylim=c(37.765,37.81),x=stations$long,y=stations$lat,pch=19,col="orange")
for(i in 1:nrow(trips)){
node1<-stations[trips[i,]$start_station_id == stations$id,]
node2<-stations[trips[i,]$end_station_id == stations$id,]
#}
arc<-gcIntermediate(c(node1$long,node1$lat),
c(node2$long,node2$lat),
n=100,addStartEnd=TRUE,breakAtDateLine = FALSE,sp=FALSE,sepNA)
edge.ind<-round(100*trips[i,]$count/max(trips$count))
lines(arc,col=edge.col[edge.ind],lwd=edge.ind/30)
}
text(x=stations$long,y=stations$lat,label=stations$name,cex=0.35)
stations<-read.csv("/Users/fanyang/Desktop/station(1).csv",header=TRUE)
trips<-read.csv("/Users/fanyang/Desktop/trip count.csv",header=TRUE)
colnames(trips)[1]<-"start_station_id"
library(ggmap)
library(maps)
library(geosphere)
map.cities(us.cities,country = "CA")
map.text("state","California")
map<-get_map(location = 'san francisco', zoom = 9)
col.1<-adjustcolor("white", alpha=0.4)
col.2<-adjustcolor("red",alpha=0.4)
edge.pal<-colorRampPalette(c(col.1,col.2),alpha=TRUE)
edge.col<-edge.pal(100)
plot(xlim=c(-122.375,-122.435),ylim=c(37.765,37.81),x=stations$long,y=stations$lat,pch=19,col="orange")
for(i in 1:nrow(trips)){
node1<-stations[trips[i,]$start_station_id == stations$id,]
node2<-stations[trips[i,]$end_station_id == stations$id,]
#}
arc<-gcIntermediate(c(node1$long,node1$lat),
c(node2$long,node2$lat),
n=100,addStartEnd=TRUE,breakAtDateLine = FALSE,sp=FALSE,sepNA)
edge.ind<-round(100*trips[i,]$count/max(trips$count))
lines(arc,col=edge.col[edge.ind],lwd=edge.ind/30)
}
text(x=stations$long,y=stations$lat,label=stations$name,cex=0.35)
setwd('/Users/fanyang/EE627_HW/HW/HW1')
M<-read.csv('EE627A_HW1_Data.csv',header=TRUE)
head(M)
theMatrix<-as.matrix(M)
Mkt<-seq.default()
SMB<-seq.default()
HML<-seq.default()
Mom<-seq.default()
for(i in 0:10){
for(j in 1:10){
Mkt[i]<-cor(theMatrix[1:12,2],theMatrix[((j+i*12)+1):((j+i*12)+11),2])
SMB[i]<-cor(theMatrix[1:12,3],theMatrix[i,3])
HML[i]<-cor(theMatrix[1:12,4],theMatrix[i,4])
Mom[i]<-cor(theMatrix[1:12,6],theMatrix[i,6])
}
}
for(i in 1:10){
Mkt[i]<-cor(theMatrix[1:12,2],theMatrix[((i*12)+1):((i*12)+11),2])
SMB[i]<-cor(theMatrix[1:12,3],theMatrix[i,3])
HML[i]<-cor(theMatrix[1:12,4],theMatrix[i,4])
Mom[i]<-cor(theMatrix[1:12,6],theMatrix[i,6])
}
for(i in 1:10){
Mkt[i]<-cor(theMatrix[1,2],theMatrix[i,2])
SMB[i]<-cor(theMatrix[1,3],theMatrix[i,3])
HML[i]<-cor(theMatrix[1,4],theMatrix[i,4])
Mom[i]<-cor(theMatrix[1,6],theMatrix[i,6])
}
Mkt<-as.matrix(Mkt)
SMB<-as.matrix(SMB)
HML<-as.matrix(HML)
Mom<-as.matrix(Mom)
whole<-cbind(Mkt,SMB,HML,Mom)
whole<-as.matrix(whole)
nrow(whole)
head(whole)
for(i in 1:10){
Mkt[i]<-acf(theMatrix[1,2],theMatrix[i,2])
SMB[i]<-acf(theMatrix[1,3],theMatrix[i,3])
HML[i]<-acf(theMatrix[1,4],theMatrix[i,4])
Mom[i]<-acf(theMatrix[1,6],theMatrix[i,6])
}
for(i in 1:10){
Mkt[i]<-acf(theMatrix[1,2],lag.max=i)
SMB[i]<-acf(theMatrix[1,3],lag.max=i)
HML[i]<-acf(theMatrix[1,4],lag.max=i)
Mom[i]<-acf(theMatrix[1,6],lag.max=i)
}
Mkt<-as.matrix(Mkt)
SMB<-as.matrix(SMB)
HML<-as.matrix(HML)
Mom<-as.matrix(Mom)
whole<-cbind(Mkt,SMB,HML,Mom)
whole<-as.matrix(whole)
nrow(whole)
head(whole)
setwd('/Users/fanyang/EE627_HW/HW/HW1')
M<-read.csv('EE627A_HW1_Data.csv',header=TRUE)
head(M)
theMatrix<-as.matrix(M)
Mkt<-seq.default()
SMB<-seq.default()
HML<-seq.default()
Mom<-seq.default()
Mkt[i]<-acf(theMatrix[1,2],lag.max=10)
Mkt<-acf(theMatrix[1,2],lag.max=10)
SMB<-acf(theMatrix[1,3],lag.max=10)
HML<-acf(theMatrix[1,4],lag.max=10)
Mom<-acf(theMatrix[1,6],lag.max=10)
Mkt<-as.matrix(Mkt)
SMB<-as.matrix(SMB)
HML<-as.matrix(HML)
Mom<-as.matrix(Mom)
whole<-cbind(Mkt,SMB,HML,Mom)
whole<-as.matrix(whole)
nrow(whole)
head(whole)
Mkt<-acf(theMatrix[1,2],lag=10)
SMB<-acf(theMatrix[1,3],lag=10)
HML<-acf(theMatrix[1,4],lag=10)
Mom<-acf(theMatrix[1,6],lag=10)
Mkt<-as.matrix(Mkt)
SMB<-as.matrix(SMB)
HML<-as.matrix(HML)
Mom<-as.matrix(Mom)
whole<-cbind(Mkt,SMB,HML,Mom)
whole<-as.matrix(whole)
nrow(whole)
head(whole)
Mkt<-acf(theMatrix[1,2])
SMB<-acf(theMatrix[1,3])
HML<-acf(theMatrix[1,4])
Mom<-acf(theMatrix[1,6])
Mkt<-as.matrix(Mkt)
SMB<-as.matrix(SMB)
HML<-as.matrix(HML)
Mom<-as.matrix(Mom)
whole<-cbind(Mkt,SMB,HML,Mom)
whole<-as.matrix(whole)
nrow(whole)
head(whole)
Mkt<-acf(theMatrix[1:10,2])
SMB<-acf(theMatrix[1:10,3])
HML<-acf(theMatrix[1:10,4])
Mom<-acf(theMatrix[1:10,6])
Mkt<-as.matrix(Mkt)
SMB<-as.matrix(SMB)
HML<-as.matrix(HML)
Mom<-as.matrix(Mom)
whole<-cbind(Mkt,SMB,HML,Mom)
whole<-as.matrix(whole)
nrow(whole)
head(whole)
write.csv(whole,"acf.csv")
colnames(whole,"lag")
colnames(whole,do.NULL = TRUE,prefix = "lag")
head(whole)
colnames(whole)<-"lag"
colnames(whole)<-colnames("lag")
head(whole)
colnames(whole,do.NULL = FALSE,prefix = "lag")
head(whole)
write.csv(whole,"acf.csv")
ncol(whole)
setwd('/Users/fanyang/EE627_HW/HW/HW1')
M<-read.csv('EE627A_HW1_Data.csv',header=TRUE)
head(M)
theMatrix<-as.matrix(M)
Mkt<-seq.default()
SMB<-seq.default()
HML<-seq.default()
Mom<-seq.default()
Mkt<-acf(theMatrix[1:10,2])
SMB<-acf(theMatrix[1:10,3])
HML<-acf(theMatrix[1:10,4])
Mom<-acf(theMatrix[1:10,6])
Mkt<-as.matrix(Mkt)
SMB<-as.matrix(SMB)
HML<-as.matrix(HML)
Mom<-as.matrix(Mom)
whole<-cbind(Mkt,SMB,HML,Mom)
nrow(whole)
ncol(whole)
colnames(whole,do.NULL = FALSE,prefix = "lag")
head(whole)
write.csv(whole,"acf.csv")
colenames(whole)<-colnames(whole,do.NULL = FALSE,prefix = "lag")
colenames(whole)<-colnames(whole,do.NULL = FALSE,prefix = "lag.")
colenames(whole) <-colnames(whole,do.NULL = FALSE,prefix = "lag.")
colnames(whole) <-colnames(whole,do.NULL = FALSE,prefix = "lag.")
head(whole)
write.csv(whole,"acf.csv")
Mkt<-acf(theMatrix[1:10,2],lag.max = 10)
SMB<-acf(theMatrix[1:10,3],lag.max = 10)
HML<-acf(theMatrix[1:10,4],lag.max = 10)
Mom<-acf(theMatrix[1:10,6],lag.max = 10)
Mkt<-as.matrix(Mkt)
SMB<-as.matrix(SMB)
HML<-as.matrix(HML)
Mom<-as.matrix(Mom)
whole<-cbind(Mkt,SMB,HML,Mom)
whole<-as.matrix(whole)
nrow(whole)
ncol(whole)
colnames(whole) <-colnames(whole,do.NULL = FALSE,prefix = "lag.")
head(whole)
write.csv(whole,"acf.csv")
Mkt<-acf(theMatrix[1,2],lag.max = 10)
SMB<-acf(theMatrix[1,3],lag.max = 10)
HML<-acf(theMatrix[1,4],lag.max = 10)
Mom<-acf(theMatrix[1,6],lag.max = 10)
Mkt<-as.matrix(Mkt)
SMB<-as.matrix(SMB)
HML<-as.matrix(HML)
Mom<-as.matrix(Mom)
whole<-cbind(Mkt,SMB,HML,Mom)
whole<-as.matrix(whole)
nrow(whole)
ncol(whole)
colnames(whole) <-colnames(whole,do.NULL = FALSE,prefix = "lag.")
head(whole)
setwd('/Users/fanyang/EE627_HW/HW/HW1')
M<-read.csv('EE627A_HW1_Data.csv',header=TRUE)
head(M)
theMatrix<-as.matrix(M)
Mkt<-seq.default()
Mkt<-acf(theMatrix[1:10,2],lag.max = 10)
Mkt<-as.matrix(Mkt)
head(Mkt)
setwd('/Users/fanyang/EE627_HW/HW/HW1')
M<-read.csv('EE627A_HW1_Data.csv',header=TRUE)
head(M)
theMatrix<-as.matrix(M)
Mkt<-acf(theMatrix[1:10,2],lag.max = 10)
SMB<-acf(theMatrix[1,3],lag.max = 10)
HML<-acf(theMatrix[1,4],lag.max = 10)
Mom<-acf(theMatrix[1,6],lag.max = 10)
setwd('/Users/fanyang/EE627_HW/HW/HW1')
M<-read.csv('EE627A_HW1_Data.csv',header=TRUE)
head(M)
theMatrix<-as.matrix(M)
Mkt<-seq.default()
SMB<-seq.default()
HML<-seq.default()
Mom<-seq.default()
Mkt<-acf(theMatrix[1:10,2],lag.max = 10)
SMB<-acf(theMatrix[1,3],lag.max = 10)
HML<-acf(theMatrix[1,4],lag.max = 10)
Mom<-acf(theMatrix[1,6],lag.max = 10)
Mkt<-as.matrix(Mkt)
Mkt<-acf(theMatrix[1:10,2],lag.max = 10)
SMB<-acf(theMatrix[1:10,3],lag.max = 10)
HML<-acf(theMatrix[1:10,4],lag.max = 10)
Mom<-acf(theMatrix[1:10,6],lag.max = 10)
Mkt<-as.matrix(Mkt)
Mkt<-acf(theMatrix[1:10,2],lag.max = 10)
SMB<-acf(theMatrix[1:10,3],lag.max = 10)
HML<-acf(theMatrix[1:10,4],lag.max = 10)
Mom<-acf(theMatrix[1:10,6],lag.max = 10)
Mkt<-as.matrix(Mkt)
SMB<-acf(theMatrix[1:10,3],lag.max = 10)
Mkt<-acf(theMatrix[1:10,2],lag.max = 10)
Mkt<-as.matrix(Mkt)
head(Mkt)
Mkt<-acf(theMatrix[1:10,2])
SMB<-acf(theMatrix[1:10,3])
HML<-acf(theMatrix[1:10,4])
Mom<-acf(theMatrix[1:10,6])
Mkt<-acf(theMatrix[1:10,2])
SMB<-acf(theMatrix[1:10,3])
Mkt<-acf(theMatrix[1:10,2])
SMB<-acf(theMatrix[1:10,3])
HML<-acf(theMatrix[1:10,4])
Mom<-acf(theMatrix[1:10,6])
